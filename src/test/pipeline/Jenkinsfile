def getBuildDate() {
    def now = new Date()
    def formatter = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    formatter.timeZone = TimeZone.getTimeZone("UTC")
    return formatter.format(now)
}

pipeline {
    agent any
    environment {
        harborRegistryUrl = 'registry.citglobal.com'
        harborCredentialId = 'registry-citglobal-com'
        repositoryName = 'cit-local-repo/maven-test'
        // HARBOR_USERNAME = "${credentials('registry-citglobal-com').username}"
        // HARBOR_PASSWORD = "${credentials('registry-citglobal-com').password}"
    }
    stages {
        stage('DOCKER_BUILD') {
            steps {
                dir("src/test/pipeline") {
                    script {
                        docker.build("registry.citglobal.com/${repositoryName}:${BUILD_NUMBER}", "--build-arg BUILD_DATE=${getBuildDate()} .")
                    }
                }
            }
        }
        stage('DOCKER_PUSH') {
            steps {
                script {
                    docker.withRegistry("http://${harborRegistryUrl}", harborCredentialId) {
                        docker.image("${harborRegistryUrl}/${repositoryName}:${BUILD_NUMBER}").push()
                        docker.image("${harborRegistryUrl}/${repositoryName}:${BUILD_NUMBER}").push("latest")
                    }
                }
            }
        }
        stage('Check Vulnerability Scan Results') {
            steps {
                script {
                    def harborAPIUrl = 'http://registry.citglobal.com'
                    def repository = 'maven-test'
                    def artifact = 'latest'
                    def scanResults = null
                    // Use the credentials you configured
                    withCredentials([usernamePassword(credentialsId: 'registry-citglobal-com', usernameVariable: 'HARBOR_USERNAME', passwordVariable: 'HARBOR_PASSWORD')]) {
                    // Fetch vulnerability scan results
                    def curlcommand="""
                        curl -X 'GET' -u $HARBOR_USERNAME:$HARBOR_PASSWORD \
                        'http://registry.citglobal.com/api/v2.0/projects/cit-local-repo/repositories/maven-test/artifacts/latest?page=1&page_size=10&with_tag=true&with_label=false&with_scan_overview=true&with_accessory=false&with_signature=true&with_immutable_status=false' \
                        -H 'accept: application/json' \
                        -H 'X-Accept-Vulnerabilities: application/vnd.security.vulnerability.report; version=1.1, application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' \
                       
                    """
                        //  -H 'authorization: Basic amVua2luczpKZW5raW5zQGNpdEAzMjE0NTY='
                    scanResults = sh(script: curlcommand, returnStdout: true).trim()
                    }
                    echo """
                    $scanResults
                    """
                    // Parse and evaluate scan results
                    def vulnerabilities = readJSON text: scanResults
                     echo """
                    $vulnerabilities
                    """
                    // Extract scan_status value
                    def CriticalStatus = vulnerabilities.scan_overview['application/vnd.security.vulnerability.report; version=1.1'].summary['summary'].Critical
                    def HighStatus = vulnerabilities.scan_overview['application/vnd.security.vulnerability.report; version=1.1'].summary['summary'].High

                    // Print the scan_status value
                    echo "Scan CriticalStatus: ${CriticalStatus} ,  HighStatus: ${HighStatus}"
                    
                    if (CriticalStatus > 0 || HighStatus > 0) {
                        echo "High or critical vulnerabilities found. Build failed."
                    } else {
                        echo "No high or critical vulnerabilities found. Proceeding with the pipeline."
                        // Continue with the pipeline as normal.
                    }

                    // Print vulnerability scan results and Harbor link
                    echo "Vulnerability Scan Results: ${scanResults}"
                    echo "Harbor URL: ${harborAPIUrl}/harbor/projects/${repository}/repositories/${artifact}/_vulnerability"
                }
            }
        }
        stage('DOCKER_SCAN') {
            steps {
                script {
                    waitForHarborWebHook fullImageName: 'registry.citglobal.com/cit-local-repo/maven-test:latest', server: 'registry.citglobal.com', credentialsId: 'registry-citglobal-com', severity: 'Medium', abortPipeline: false
                    sh "docker rmi ${harborRegistryUrl}/${repositoryName}:${BUILD_NUMBER}"
                }
            }
        }
    }
}
